/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Droope/data.ts":
/*!****************************!*\
  !*** ./src/Droope/data.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = [\r\n    { id: \"10\", name: \"Construction / Civil Engineering\" },\r\n    { id: \"7\", name: \"Banking / Financial Services / Broking\" },\r\n    { id: \"36\", name: \"Oil & Gas / Petroleum\" },\r\n    { id: \"25\", name: \"IT - Software Services\" },\r\n    { id: \"30\", name: \"Medical / Healthcare / Diagnostics / Medical Devices\" },\r\n    { id: \"20\", name: \"Hotels / Hospitality\" },\r\n    { id: \"55\", name: \"Accounting & Auditing\" },\r\n    { id: \"2\", name: \"Advertising / PR / Event Management\" },\r\n    { id: \"3\", name: \"Agriculture / Dairy / Poultry / Livestock\" },\r\n    { id: \"52\", name: \"Air Conditioning / Refrigeration / HVAC\" },\r\n    { id: \"4\", name: \"Airlines / Aviation\" },\r\n    { id: \"5\", name: \"Architecture / Interior Designing\" },\r\n    { id: \"6\", name: \"Automotive / Automobile / Auto Accessories\" },\r\n    { id: \"56\", name: \"Call Center / BPO / KPO / Outsourcing\" },\r\n    { id: \"57\", name: \"Ceramics / Sanitary ware\" },\r\n    { id: \"9\", name: \"Chemicals / Petrochemicals / Polymers / Industrial Gases\" },\r\n    { id: \"58\", name: \"Concrete / Readymix / Cement\" },\r\n    { id: \"59\", name: \"Consulting / Management Consulting / Advisory Services\" },\r\n    { id: \"11\", name: \"Consumer Durables / Consumer Electronics\" },\r\n    { id: \"14\", name: \"Defence / Military / Government\" },\r\n    { id: \"15\", name: \"Education / Training / Teaching / Academics\" },\r\n    { id: \"60\", name: \"Elevators / Escalators\" },\r\n    { id: \"61\", name: \"Engineering Design & Consulting\" },\r\n    { id: \"62\", name: \"Entertainment / Recreation / Theme Parks\" },\r\n    { id: \"63\", name: \"Facilities Management\" },\r\n    { id: \"17\", name: \"Fertilizers / Pesticides\" },\r\n    { id: \"64\", name: \"Fitness / Wellness / Gym / Salon / Spa\" },\r\n    { id: \"12\", name: \"FMCG / Foods / Beverages\" },\r\n    { id: \"18\", name: \"Fresher - No Industry Experience / Not Employed\" },\r\n    { id: \"65\", name: \"Furniture / Furnishings / Home DÃ©cor\" },\r\n    { id: \"16\", name: \"General Trading / Export / Import\" },\r\n    { id: \"66\", name: \"Glass\" },\r\n    { id: \"19\", name: \"Gold / Gems & Jewellery\" },\r\n    { id: \"21\", name: \"Industrial Products / Heavy Machinery\" },\r\n    { id: \"22\", name: \"Insurance\" },\r\n    { id: \"23\", name: \"Internet / E-commerce / Dotcom\" },\r\n    { id: \"24\", name: \"IT - Hardware & Networking\" },\r\n    { id: \"67\", name: \"Landscaping\" },\r\n    { id: \"68\", name: \"Legal / Law Firm\" },\r\n    { id: \"13\", name: \"Logistics / Transportation / Warehousing / Courier\" },\r\n    { id: \"29\", name: \"Media / Publishing / TV / Radio / Outdoor / Digital\" },\r\n    { id: \"31\", name: \"Metals / Steel / Iron / Aluminium / Fabrication\" },\r\n    { id: \"69\", name: \"Metro / Railway / Train\" },\r\n    { id: \"54\", name: \"Mining / Forestry / Fishing\" },\r\n    { id: \"32\", name: \"NGO / Social Services / Community Services / Non-Profit \" },\r\n    { id: \"34\", name: \"Office Automation / Office Equipment / Office Supplies / Stationery \" },\r\n    { id: \"70\", name: \"Oil & Gas: Consultancy, Design, FEED\" },\r\n    { id: \"71\", name: \"Oil & Gas: Exploration, Drilling, Production, Field Services\" },\r\n    { id: \"72\", name: \"Oil & Gas: Refining, Storage, Marketing, Distribution\" },\r\n    { id: \"1000\", name: \"Other\" },\r\n    { id: \"35\", name: \"Paper / Paper Pulp / Paper Mill\" },\r\n    { id: \"73\", name: \"Perfumery / Toiletries / Personal Care / Cosmetics\" },\r\n    { id: \"37\", name: \"Pharma / Biotech / Clinical Research\" },\r\n    { id: \"38\", name: \"Plastics / Rubber\" },\r\n    { id: \"39\", name: \"Power Generation / Power Distribution / Energy / Nuclear Energy\" },\r\n    { id: \"40\", name: \"Printing / Packaging\" },\r\n    { id: \"41\", name: \"Real Estate\" },\r\n    { id: \"42\", name: \"Recruitment / Placement Firm / Executive Search\" },\r\n    { id: \"53\", name: \"Restaurants / Catering / Food Services\" },\r\n    { id: \"43\", name: \"Retail\" },\r\n    { id: \"45\", name: \"Security / Law Enforcement\" },\r\n    { id: \"74\", name: \"Shipbuilding / Ship Repair / Ship Maintenance / Drydocks\" },\r\n    { id: \"46\", name: \"Shipping / Freight\" },\r\n    { id: \"47\", name: \"Telecom / ISP\" },\r\n    { id: \"75\", name: \"Testing / Inspection / Certification Services\" },\r\n    { id: \"49\", name: \"Textiles  Clothing / Apparels / Fashion / Accessories\" },\r\n    { id: \"76\", name: \"Travel / Tourism\" },\r\n    { id: \"50\", name: \"Tyres\" },\r\n    { id: \"77\", name: \"Water Treatment / De-Salination / Waste Management\" }\r\n];\r\n\n\n//# sourceURL=webpack:///./src/Droope/data.ts?");

/***/ }),

/***/ "./src/Droope/display.observer.ts":
/*!****************************************!*\
  !*** ./src/Droope/display.observer.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SelectDisplay = /** @class */ (function () {\r\n    function SelectDisplay(subject, displayDecorationList) {\r\n        if (displayDecorationList === void 0) { displayDecorationList = []; }\r\n        this.subject = subject;\r\n        this.subject.registerObserver(this);\r\n        // this.decorator = new SelectDisplayDecorator(subject);\r\n        this.displayDecorationList = displayDecorationList;\r\n    }\r\n    SelectDisplay.prototype.buildView = function (newData) {\r\n        var view = document.createElement(\"UL\");\r\n        newData.map(function (item) {\r\n            var listItem = document.createElement(\"LI\");\r\n            listItem.textContent = item.name;\r\n            listItem.classList.add(\"selection-item\");\r\n            listItem.setAttribute(\"data-obj\", JSON.stringify(item));\r\n            view.appendChild(listItem);\r\n        });\r\n        return view;\r\n    };\r\n    SelectDisplay.prototype.update = function (newData) {\r\n        var selection = newData.selection;\r\n        var view = this.buildView(selection);\r\n        // this.displayDecorationList.map(decorationName => {\r\n        //     view = this.decorator.add(view, decorationName);\r\n        // });\r\n        this.subject.displayElement.innerHTML = \"\";\r\n        this.subject.displayElement.appendChild(view);\r\n    };\r\n    return SelectDisplay;\r\n}());\r\nexports.default = SelectDisplay;\r\n\n\n//# sourceURL=webpack:///./src/Droope/display.observer.ts?");

/***/ }),

/***/ "./src/Droope/droope.subject.ts":
/*!**************************************!*\
  !*** ./src/Droope/droope.subject.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spread = (this && this.__spread) || function () {\r\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SelectBoxInput = /** @class */ (function () {\r\n    function SelectBoxInput(options) {\r\n        var _this = this;\r\n        this.resultSet = {\r\n            list: [],\r\n            selection: [],\r\n            hasListUpdated: true\r\n        };\r\n        this.arrowCounter = -1;\r\n        this.noResultElement = document.createElement(\"p\");\r\n        this.dataSet = [];\r\n        this.listObserverCollection = [];\r\n        this.displayListOnFocus = false;\r\n        this.inputElement = options.inputElement;\r\n        this.displayElement = options.displayElement;\r\n        this.lisitingElement = options.lisitingElement;\r\n        this.selectLimit = options.selectLimit || 1;\r\n        this.displayListOnFocus = options.displayListOnFocus || false;\r\n        this.inputElement.addEventListener(\"keydown\", function (e) { return _this.handleBackspace(e); });\r\n        this.inputElement.addEventListener(\"keyup\", function (e) { return _this.onKeyUp(e); });\r\n        this.lisitingElement.addEventListener(\"click\", function (e) {\r\n            var target = e.target;\r\n            if (target) {\r\n                _this.handleSelect(target);\r\n            }\r\n        });\r\n        if (this.displayListOnFocus === true) {\r\n            document.addEventListener(\"click\", function (e) { return _this.handleDocumentBlur(e); });\r\n            this.inputElement.addEventListener(\"focus\", function (e) { return _this.handleListingDisplayStateOn(e.type); });\r\n            // Close listing on initialization\r\n            this.handleListingDisplayStateOn(\"blur\");\r\n        }\r\n        if (options.noResultErrorMessage) {\r\n            this.noResultElement.classList.add(\"no-result\");\r\n            this.noResultElement.style.display = \"none\";\r\n            this.noResultElement.textContent = options.noResultErrorMessage || \"\";\r\n        }\r\n    }\r\n    SelectBoxInput.prototype.handleDocumentBlur = function (e) {\r\n        try {\r\n            var eventPath = e.path;\r\n            var hasNotClickedOnListing = eventPath.indexOf(this.lisitingElement) === -1;\r\n            var hasNotClickedOnInput = eventPath.indexOf(this.inputElement) === -1;\r\n            if (hasNotClickedOnListing && hasNotClickedOnInput) {\r\n                this.handleListingDisplayStateOn(\"blur\");\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.warn(err.message);\r\n        }\r\n    };\r\n    SelectBoxInput.prototype.handleListingDisplayStateOn = function (eventType) {\r\n        this.lisitingElement.style.display = eventType === \"focus\" ? \"block\" : \"none\";\r\n    };\r\n    SelectBoxInput.prototype.handleSelect = function (target) {\r\n        var selectedObjStr = target.getAttribute(\"data-obj\") || \"\";\r\n        var selectedObj = JSON.parse(selectedObjStr);\r\n        if (selectedObj) {\r\n            var selectionLimitExceeded = this.selectLimit > 1 ? this.resultSet.selection.length + 1 > this.selectLimit : false;\r\n            var isLastSelectionNow = this.resultSet.selection.length + 1 >= this.selectLimit;\r\n            var isDuplicate = this.resultSet.selection.filter(function (item) { return item.id === selectedObj.id; }).length > 0;\r\n            if (selectedObj && isDuplicate === false) {\r\n                if (selectionLimitExceeded === false) {\r\n                    var selection = this.selectLimit === 1 ? [selectedObj] : __spread(this.resultSet.selection, [selectedObj]);\r\n                    var result = {\r\n                        hasListUpdated: false,\r\n                        list: __spread(this.resultSet.list),\r\n                        selection: selection\r\n                    };\r\n                    this.setData(result);\r\n                }\r\n                if (isLastSelectionNow) {\r\n                    this.handleListingDisplayStateOn(\"blur\");\r\n                }\r\n            }\r\n        }\r\n    };\r\n    SelectBoxInput.prototype.handleBackspace = function (e) {\r\n        var which = e.which;\r\n        var query = e.target.value.trim();\r\n        var isQueryEmpty = query === \"\";\r\n        if (which === 8) {\r\n            var lastIndexOfSelection = this.resultSet.selection.length - 1;\r\n            var lastId = lastIndexOfSelection >= 0 ? this.resultSet.selection[lastIndexOfSelection].id : null;\r\n            if (isQueryEmpty === true && lastId !== null) {\r\n                this.deleteSelection(lastId);\r\n                this.handleListingDisplayStateOn(\"focus\");\r\n            }\r\n        }\r\n    };\r\n    SelectBoxInput.prototype.onKeyUp = function (e) {\r\n        var query = e && e.target && e.target.value ? e.target.value.trim() : \"\";\r\n        var which = e.which;\r\n        switch (which) {\r\n            case 9: { // Tab pressed\r\n                this.handleListingDisplayStateOn(\"blur\");\r\n                return;\r\n            }\r\n            // ENter\r\n            case 13: {\r\n                var listItem = this.lisitingElement.querySelector(\".active\");\r\n                if (listItem) {\r\n                    this.handleSelect(listItem);\r\n                }\r\n                return;\r\n            }\r\n            case 38: // Up arrow\r\n                this.handleArrow(\"up\");\r\n                return;\r\n            case 40: {\r\n                // Down arrow\r\n                this.handleArrow(\"down\");\r\n                return;\r\n            }\r\n            default: {\r\n                // Default filtering logic\r\n                var filteredList = this.dataSet.filter(function (item) {\r\n                    var lowerItem = item.name.toLowerCase();\r\n                    var lowerQuery = query.toLowerCase();\r\n                    var includesSupported = Array.prototype.includes !== undefined;\r\n                    return includesSupported ? lowerItem.includes(lowerQuery) : lowerItem.indexOf(lowerQuery) !== -1;\r\n                });\r\n                var hasResults = filteredList.length !== 0;\r\n                var result = {\r\n                    hasListUpdated: true,\r\n                    list: hasResults ? filteredList : this.dataSet,\r\n                    selection: __spread(this.resultSet.selection)\r\n                };\r\n                this.setData(result);\r\n                // Reset counter for arrow keys\r\n                this.arrowCounter = -1;\r\n                this.showNoResultMessage(hasResults);\r\n            }\r\n        }\r\n    };\r\n    SelectBoxInput.prototype.showNoResultMessage = function (hasResults) {\r\n        try {\r\n            this.noResultElement.style.display = hasResults ? \"none\" : \"block\";\r\n        }\r\n        catch (err) {\r\n            console.warn(err.message);\r\n        }\r\n    };\r\n    SelectBoxInput.prototype.handleArrow = function (direction) {\r\n        try {\r\n            /** get list of all li items */\r\n            var listItems = this.lisitingElement.querySelectorAll(\"li\");\r\n            /** determine the direction */\r\n            var isGoingUp = direction === \"up\";\r\n            var isGoingDown = direction === \"down\";\r\n            if (isGoingDown === true) {\r\n                /** counter is by default at -1 for first selection i.e. index 0 */\r\n                var currentElement = listItems[this.arrowCounter + 1];\r\n                if (currentElement) {\r\n                    // add active class to\r\n                    currentElement.classList.add(\"active\");\r\n                    var prevElement = currentElement.previousElementSibling;\r\n                    if (prevElement) {\r\n                        prevElement.classList.remove(\"active\");\r\n                    }\r\n                }\r\n                if (this.arrowCounter < listItems.length - 1) {\r\n                    this.arrowCounter++;\r\n                }\r\n            }\r\n            if (isGoingUp === true) {\r\n                var currentElement = listItems[this.arrowCounter];\r\n                if (currentElement) {\r\n                    currentElement.classList.remove(\"active\");\r\n                    var prevElement = currentElement.previousElementSibling;\r\n                    if (prevElement) {\r\n                        prevElement.classList.add(\"active\");\r\n                    }\r\n                }\r\n                if (this.arrowCounter > -1) {\r\n                    this.arrowCounter--;\r\n                }\r\n            }\r\n            console.log(this.arrowCounter);\r\n        }\r\n        catch (err) {\r\n            console.warn(err.message);\r\n        }\r\n    };\r\n    SelectBoxInput.prototype.setData = function (newData) {\r\n        try {\r\n            // This logic executes when SelectBox is provided with the data first time\r\n            var isDataForFirstTime = newData.construct;\r\n            if (isDataForFirstTime) {\r\n                this.dataSet = newData.list;\r\n                newData.hasListUpdated = true;\r\n            }\r\n            this.resultSet = {\r\n                list: newData.list || [],\r\n                selection: newData.selection || [],\r\n                hasListUpdated: newData.hasListUpdated\r\n            };\r\n            this.notifyObservers();\r\n        }\r\n        catch (err) {\r\n            console.warn(err.message);\r\n        }\r\n    };\r\n    SelectBoxInput.prototype.registerObserver = function (o) {\r\n        try {\r\n            this.listObserverCollection.push(o);\r\n        }\r\n        catch (err) {\r\n            console.warn(err.message);\r\n        }\r\n    };\r\n    SelectBoxInput.prototype.unregisterObserver = function (o) {\r\n        try {\r\n            var index = this.listObserverCollection.indexOf(o);\r\n            this.listObserverCollection.splice(index, 1);\r\n        }\r\n        catch (err) {\r\n            console.warn(err.message);\r\n        }\r\n    };\r\n    SelectBoxInput.prototype.notifyObservers = function () {\r\n        var e_1, _a;\r\n        try {\r\n            try {\r\n                for (var _b = __values(this.listObserverCollection), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var observer = _c.value;\r\n                    observer.update(this.resultSet);\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.warn(err.message);\r\n        }\r\n    };\r\n    SelectBoxInput.prototype.deleteSelection = function (id) {\r\n        var result = {\r\n            hasListUpdated: false,\r\n            list: __spread(this.resultSet.list),\r\n            selection: __spread(this.resultSet.selection.filter(function (item) { return parseInt(item.id, 10) !== parseInt(id, 10); }))\r\n        };\r\n        this.setData(result);\r\n    };\r\n    return SelectBoxInput;\r\n}());\r\nexports.default = SelectBoxInput;\r\n\n\n//# sourceURL=webpack:///./src/Droope/droope.subject.ts?");

/***/ }),

/***/ "./src/Droope/index.ts":
/*!*****************************!*\
  !*** ./src/Droope/index.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar droope_subject_1 = __importDefault(__webpack_require__(/*! ./droope.subject */ \"./src/Droope/droope.subject.ts\"));\r\nvar lisiting_observer_1 = __importDefault(__webpack_require__(/*! ./lisiting.observer */ \"./src/Droope/lisiting.observer.ts\"));\r\nvar display_observer_1 = __importDefault(__webpack_require__(/*! ./display.observer */ \"./src/Droope/display.observer.ts\"));\r\nvar Droope = function (options, data) {\r\n    var SelectBox = new droope_subject_1.default(options);\r\n    new lisiting_observer_1.default(SelectBox);\r\n    new display_observer_1.default(SelectBox, options.displayDecorationList);\r\n    SelectBox.setData({ list: data, construct: true, hasListUpdated: false, selection: [] });\r\n    return SelectBox;\r\n};\r\nexports.default = Droope;\r\n\n\n//# sourceURL=webpack:///./src/Droope/index.ts?");

/***/ }),

/***/ "./src/Droope/lisiting.observer.ts":
/*!*****************************************!*\
  !*** ./src/Droope/lisiting.observer.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Listing = /** @class */ (function () {\r\n    function Listing(subject) {\r\n        this.subject = subject;\r\n        this.subject.registerObserver(this);\r\n    }\r\n    Listing.prototype.generateAndAppendList = function (newData) {\r\n        var ulElement = document.createElement(\"UL\");\r\n        newData.list.forEach(function (item) {\r\n            var liElement = document.createElement(\"LI\");\r\n            liElement.textContent = item.name;\r\n            liElement.setAttribute(\"data-obj\", JSON.stringify(item));\r\n            ulElement.appendChild(liElement);\r\n        });\r\n        if (this.subject.lisitingElement) {\r\n            this.subject.lisitingElement.innerHTML = \"\";\r\n            this.subject.lisitingElement.appendChild(this.subject.noResultElement);\r\n            this.subject.lisitingElement.appendChild(ulElement);\r\n        }\r\n        return ulElement;\r\n    };\r\n    Listing.prototype.update = function (newData) {\r\n        if (newData.hasListUpdated) {\r\n            this.generateAndAppendList(newData);\r\n        }\r\n    };\r\n    return Listing;\r\n}());\r\nexports.default = Listing;\r\n\n\n//# sourceURL=webpack:///./src/Droope/lisiting.observer.ts?");

/***/ }),

/***/ "./src/Suggester/config.suggester.ts":
/*!*******************************************!*\
  !*** ./src/Suggester/config.suggester.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * do not remove any variables from this file\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar domain = \"http://suggest.naukrigulf.com/\";\r\nvar suggesterConfig = {\r\n    urls: {\r\n        autoComplete: domain + \"/suggest/autosuggest?invoker=ng&\",\r\n        caching: domain + \"/suggest/prefetch?invoker=ng&\",\r\n        checkVersion: domain + \"/suggest/v?\",\r\n        relatedConcept: domain + \"/suggest/autoconcepts?invoker=ng&\",\r\n        prefetch: domain + \"/suggest/prefetch?invoker=ng&\",\r\n        trackingURL: domain + \"//suggestlg.naukrigulf.com/logger/log?invoker=ng&\"\r\n    },\r\n    appId: 2050,\r\n    version: \"1.2.0\",\r\n    source: \"server\",\r\n    maxSuggestions: 15,\r\n    whiteListSpecialChar: [],\r\n    edge: 0,\r\n    invoker: \"ng\"\r\n};\r\nexports.default = suggesterConfig;\r\n\n\n//# sourceURL=webpack:///./src/Suggester/config.suggester.ts?");

/***/ }),

/***/ "./src/Suggester/display.observer.ts":
/*!*******************************************!*\
  !*** ./src/Suggester/display.observer.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SelectDisplay = /** @class */ (function () {\r\n    function SelectDisplay(subject, displayDecorationList) {\r\n        if (displayDecorationList === void 0) { displayDecorationList = []; }\r\n        this.subject = subject;\r\n        this.subject.registerObserver(this);\r\n        // this.decorator = new SelectDisplayDecorator(subject);\r\n        this.displayDecorationList = displayDecorationList;\r\n    }\r\n    SelectDisplay.prototype.buildView = function (newData) {\r\n        var view = document.createElement(\"UL\");\r\n        newData.map(function (item) {\r\n            var listItem = document.createElement(\"LI\");\r\n            listItem.textContent = item.name;\r\n            listItem.classList.add(\"selection-item\");\r\n            listItem.setAttribute(\"data-obj\", JSON.stringify(item));\r\n            view.appendChild(listItem);\r\n        });\r\n        return view;\r\n    };\r\n    SelectDisplay.prototype.update = function (newData) {\r\n        var selection = newData.selection;\r\n        var view = this.buildView(selection);\r\n        // this.displayDecorationList.map(decorationName => {\r\n        //     view = this.decorator.add(view, decorationName);\r\n        // });\r\n        this.subject.displayElement.innerHTML = \"\";\r\n        this.subject.displayElement.appendChild(view);\r\n    };\r\n    return SelectDisplay;\r\n}());\r\nexports.default = SelectDisplay;\r\n\n\n//# sourceURL=webpack:///./src/Suggester/display.observer.ts?");

/***/ }),

/***/ "./src/Suggester/helper.suggester.ts":
/*!*******************************************!*\
  !*** ./src/Suggester/helper.suggester.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar config_suggester_1 = __importDefault(__webpack_require__(/*! ./config.suggester */ \"./src/Suggester/config.suggester.ts\"));\r\nvar Helper = /** @class */ (function () {\r\n    function Helper() {\r\n    }\r\n    /**\r\n     * This method is responsible for sending an ajax request to fetch the suggestions for the typed query\r\n     * @param url : url for ajax hit\r\n     * @param payload : Contains an Object for paramets to be passed in the url\r\n     */\r\n    Helper.sendXhr = function (url, payload) {\r\n        return new Promise(function (resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n            try {\r\n                if (!payload || !url) {\r\n                    throw Error(\"Received empty payload/url to send request\");\r\n                }\r\n                if (!payload.query) {\r\n                    throw Error(\"Received empty query\");\r\n                }\r\n                var appId = config_suggester_1.default.appId;\r\n                var finalPayload_1 = __assign(__assign({}, payload), { appId: appId, limit: config_suggester_1.default.maxSuggestions });\r\n                var params = Object.keys(finalPayload_1)\r\n                    .map(function (key) { return key + \"=\" + finalPayload_1[key]; })\r\n                    .join(\"&\");\r\n                xhr.open(\"GET\", url + params, true);\r\n                xhr.onload = function () {\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        xhr.response && resolve(JSON.parse(xhr.response));\r\n                    }\r\n                    else {\r\n                        reject(xhr.statusText);\r\n                    }\r\n                };\r\n                xhr.onerror = function () { return reject(xhr.statusText); };\r\n                xhr.send();\r\n                return xhr;\r\n            }\r\n            catch (data) {\r\n                // console.error(data);\r\n                return xhr;\r\n            }\r\n        });\r\n    };\r\n    Helper.prefetchData = function () {\r\n        var url = config_suggester_1.default.urls.prefetch + Math.random();\r\n        Helper.sendXhr(url, null).then(function () {\r\n            // set response in LS\r\n        });\r\n    };\r\n    return Helper;\r\n}());\r\nexports.Helper = Helper;\r\n\n\n//# sourceURL=webpack:///./src/Suggester/helper.suggester.ts?");

/***/ }),

/***/ "./src/Suggester/index.ts":
/*!********************************!*\
  !*** ./src/Suggester/index.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar suggester_subject_1 = __importDefault(__webpack_require__(/*! ./suggester.subject */ \"./src/Suggester/suggester.subject.ts\"));\r\nvar lisiting_observer_1 = __importDefault(__webpack_require__(/*! ./lisiting.observer */ \"./src/Suggester/lisiting.observer.ts\"));\r\nvar display_observer_1 = __importDefault(__webpack_require__(/*! ./display.observer */ \"./src/Suggester/display.observer.ts\"));\r\nvar Suggester = function (options, data) {\r\n    var SelectBox = new suggester_subject_1.default(options);\r\n    new lisiting_observer_1.default(SelectBox);\r\n    new display_observer_1.default(SelectBox, options.displayDecorationList);\r\n    SelectBox.setData({ list: data, construct: false });\r\n    return SelectBox;\r\n};\r\nexports.default = Suggester;\r\n\n\n//# sourceURL=webpack:///./src/Suggester/index.ts?");

/***/ }),

/***/ "./src/Suggester/lisiting.observer.ts":
/*!********************************************!*\
  !*** ./src/Suggester/lisiting.observer.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Listing = /** @class */ (function () {\r\n    function Listing(subject) {\r\n        this.subject = subject;\r\n        this.subject.registerObserver(this);\r\n    }\r\n    Listing.prototype.generateAndAppendList = function (newData) {\r\n        var ulElement = document.createElement(\"UL\");\r\n        newData.list.forEach(function (item) {\r\n            var liElement = document.createElement(\"LI\");\r\n            if (item && item.name && item.displayTextEn) {\r\n                liElement.textContent = item.name || item.displayTextEn;\r\n            }\r\n            liElement.setAttribute(\"data-obj\", JSON.stringify(item));\r\n            ulElement.appendChild(liElement);\r\n        });\r\n        if (this.subject.lisitingElement) {\r\n            this.subject.lisitingElement.innerHTML = \"\";\r\n            this.subject.lisitingElement.appendChild(this.subject.noResultElement);\r\n            this.subject.lisitingElement.appendChild(ulElement);\r\n        }\r\n        return ulElement;\r\n    };\r\n    Listing.prototype.update = function (newData) {\r\n        if (newData.hasListUpdated) {\r\n            this.generateAndAppendList(newData);\r\n        }\r\n    };\r\n    return Listing;\r\n}());\r\nexports.default = Listing;\r\n\n\n//# sourceURL=webpack:///./src/Suggester/lisiting.observer.ts?");

/***/ }),

/***/ "./src/Suggester/suggester.subject.ts":
/*!********************************************!*\
  !*** ./src/Suggester/suggester.subject.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spread = (this && this.__spread) || function () {\r\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar helper_suggester_1 = __webpack_require__(/*! ./helper.suggester */ \"./src/Suggester/helper.suggester.ts\");\r\nvar config_suggester_1 = __importDefault(__webpack_require__(/*! ./config.suggester */ \"./src/Suggester/config.suggester.ts\"));\r\n/**\r\n * @Class Select Box Input that acts as a subject for the Suggester\r\n * Implements TSubject interface\r\n *\r\n *\r\n */\r\nvar SelectBoxInput = /** @class */ (function () {\r\n    /**\r\n     * @method constructor : initiates the SelectBoxInput and set the inputElement, displayElement,listingElement,\r\n     * selectLimit,displayListOnFocus\r\n     * @param options\r\n     */\r\n    function SelectBoxInput(options) {\r\n        var _this = this;\r\n        /**\r\n         * @resultSet stores the state of the suggester\r\n         * has following items: list[], selection[], hasListUpdated\r\n         */\r\n        this.resultSet = {\r\n            list: [],\r\n            selection: [],\r\n            hasListUpdated: true\r\n        };\r\n        /**\r\n         * arrowCounter: shows the counter of the arrow\r\n         */\r\n        this.arrowCounter = -1;\r\n        /**\r\n         *\r\n         */\r\n        this.dataSet = [];\r\n        /**\r\n         * listObserverCollection: List Of Observers for the Subject Select Box Input\r\n         */\r\n        this.listObserverCollection = [];\r\n        /**\r\n         * displayListOnFocus:\r\n         */\r\n        this.displayListOnFocus = false;\r\n        this.inputElement = options.inputElement;\r\n        this.displayElement = options.displayElement;\r\n        this.lisitingElement = options.lisitingElement;\r\n        this.selectLimit = options.selectLimit || 1;\r\n        this.displayListOnFocus = options.displayListOnFocus || false;\r\n        this.inputElement.addEventListener(\"keydown\", function (e) { return _this.handleBackspace(e); });\r\n        this.inputElement.addEventListener(\"keyup\", function (e) { return _this.onKeyUp(e); });\r\n        this.lisitingElement.addEventListener(\"click\", function (e) {\r\n            return _this.handleSelect(e.target);\r\n        });\r\n        if (this.displayListOnFocus === true) {\r\n            document.addEventListener(\"click\", function (e) { return _this.handleDocumentBlur(e); });\r\n            this.inputElement.addEventListener(\"focus\", function (e) {\r\n                return _this.handleListingDisplayStateOn(e.type);\r\n            });\r\n            // Close listing on initialization\r\n            this.handleListingDisplayStateOn(\"blur\");\r\n        }\r\n        if (options.noResultErrorMessage) {\r\n            this.noResultElement = document.createElement(\"P\");\r\n            this.noResultElement.classList.add(\"no-result\");\r\n            this.noResultElement.style.display = \"none\";\r\n            this.noResultElement.textContent = options.noResultErrorMessage || \"\";\r\n        }\r\n    }\r\n    /**\r\n     * event handleDocumentBlur handling event for document blur on the blur of the document\r\n     * @param event\r\n     * @returns {void}\r\n     */\r\n    SelectBoxInput.prototype.handleDocumentBlur = function (event) {\r\n        var eventPath = event.path;\r\n        var hasNotClickedOnListing = eventPath.indexOf(this.lisitingElement) === -1;\r\n        var hasNotClickedOnInput = eventPath.indexOf(this.inputElement) === -1;\r\n        if (hasNotClickedOnListing && hasNotClickedOnInput) {\r\n            this.handleListingDisplayStateOn(\"blur\");\r\n        }\r\n    };\r\n    /**\r\n     * @method handleListingDisplayStateOn : controls listing display\r\n     * @param eventType\r\n     */\r\n    SelectBoxInput.prototype.handleListingDisplayStateOn = function (eventType) {\r\n        this.lisitingElement.style.display =\r\n            eventType === \"focus\" ? \"block\" : \"none\";\r\n    };\r\n    /**\r\n     * Handle Select set the selected object by picking the item from the data-obj attribute of the selected\r\n     * listing element.\r\n     * @param target\r\n     * @returns { void }\r\n     */\r\n    SelectBoxInput.prototype.handleSelect = function (target) {\r\n        try {\r\n            var selectedObj = JSON.parse(target.getAttribute(\"data-obj\"));\r\n            this.setSelectedValues(selectedObj);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n    /**\r\n     * setSelectedValues:set the selected values from the resultset on the click of the listing element\r\n     * and sets the result set state for the Subject and the observer and updates the whole view\r\n     * @param selectedObj\r\n     * @returns void\r\n     */\r\n    SelectBoxInput.prototype.setSelectedValues = function (selectedObj) {\r\n        try {\r\n            if (selectedObj) {\r\n                // rishabh changes here\r\n                this.initialisesRelatedSearch(selectedObj);\r\n                // rishabh changes here\r\n                var selectionLimitExceeded = this.selectLimit > 1\r\n                    ? this.resultSet.selection.length >= this.selectLimit\r\n                    : false;\r\n                var isLastSelectionNow = this.resultSet.selection.length + 1 >= this.selectLimit;\r\n                var isDuplicate = this.resultSet.selection.filter(function (item) { return item.name === selectedObj.name; })\r\n                    .length > 0;\r\n                if (selectedObj && isDuplicate === false) {\r\n                    if (selectionLimitExceeded === false) {\r\n                        var selection = this.selectLimit === 1\r\n                            ? [selectedObj]\r\n                            : __spread(this.resultSet.selection, [selectedObj]);\r\n                        var result = {\r\n                            hasListUpdated: false,\r\n                            list: __spread(this.resultSet.list),\r\n                            selection: selection\r\n                        };\r\n                        this.emptyInputFeilds();\r\n                        this.setData(result);\r\n                    }\r\n                    if (isLastSelectionNow) {\r\n                        this.handleListingDisplayStateOn(\"blur\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw new Error(\"Error in selecting target in here\" + e);\r\n        }\r\n    };\r\n    /**\r\n     * This empties the input feilds values\r\n     * @returns{void}\r\n     */\r\n    SelectBoxInput.prototype.emptyInputFeilds = function () {\r\n        try {\r\n            this.inputElement.value = \"\";\r\n        }\r\n        catch (e) {\r\n            console.error(\"Emptying input feilds\");\r\n        }\r\n    };\r\n    /**\r\n     * Deletes the query on backspace and updates the query in the input feilds and also deletes the selected values\r\n     * and updates the lsiting element based on that.\r\n     * @param e : keyboardEvent\r\n     */\r\n    SelectBoxInput.prototype.handleBackspace = function (e) {\r\n        var which = e.which;\r\n        var query = e.target.value.trim();\r\n        var isQueryEmpty = query === \"\";\r\n        if (which === 8) {\r\n            var lastIndexOfSelection = this.resultSet.selection.length - 1;\r\n            var lastName = lastIndexOfSelection >= 0 ? this.resultSet.selection[lastIndexOfSelection].name : null;\r\n            if (isQueryEmpty === true && lastName !== null) {\r\n                this.deleteSelection(lastName);\r\n                this.handleListingDisplayStateOn(\"focus\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles the keyUp event attached to the suggester input field.It does different functionalities\r\n     * when the event is being  done. Covers a lot of cases for different keys presses that are as follows:\r\n     * case 9: Tabs Pressed\r\n     * Handles the Listing Display State and sets to blur\r\n     * case 13: Enter pressed\r\n     * finds the current active listing element and then Selects that listing element into the display and\r\n     * pass the state on\r\n     * case 38: Up Arrow\r\n     * handles the UpArrow case by making the listing element above current active listing element as active\r\n     * case 40: Down Arrow\r\n     * handles the Down Arrow cases by the listing element below the current active listing element as active\r\n     * @param e : KeyBoardEvent\r\n     * @returns {void}\r\n     */\r\n    SelectBoxInput.prototype.onKeyUp = function (e) {\r\n        try {\r\n            var query = e && e.target && e.target.value\r\n                ? e.target.value.trim()\r\n                : \"\";\r\n            var which = e.which;\r\n            var category = \"top\";\r\n            var selectedObj = {};\r\n            switch (which) {\r\n                case 9: // Tab pressed\r\n                    this.handleListingDisplayStateOn(\"blur\");\r\n                    return;\r\n                case 13: // Enter\r\n                    // eslint-disable-next-line no-case-declarations\r\n                    var listItem = this.lisitingElement.querySelector(\".active\");\r\n                    if (listItem) {\r\n                        this.handleSelect(listItem);\r\n                    }\r\n                    return;\r\n                case 38: // Up arrow\r\n                    this.handleArrow(\"up\");\r\n                    return;\r\n                case 40: // Down arrow\r\n                    this.handleArrow(\"down\");\r\n                    return;\r\n                case 188:\r\n                    if (query.length > 1) {\r\n                        selectedObj.id = 0;\r\n                        selectedObj.name = query.split(\",\")[0];\r\n                        this.setSelectedValues(selectedObj);\r\n                    }\r\n                    return;\r\n                default:\r\n                    this.handlesApiResponse(helper_suggester_1.Helper.sendXhr(config_suggester_1.default.urls.autoComplete, {\r\n                        query: query,\r\n                        category: category\r\n                    }), category, query, \"sug\");\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(\"Error found: \" + e);\r\n        }\r\n    };\r\n    /**\r\n        * Initiates related search functionality that takes selectedObject selected by clicking on the listing\r\n        * element . The resposibility of this function is to fetch the selectedObject query and then send the\r\n        * ajax hit to get more related  searches .\r\n        * @param selectedObject: TData : Selected Object from the Listing element being clicked\r\n        * @returns {return}\r\n        * @throws {null}\r\n        *\r\n        */\r\n    SelectBoxInput.prototype.initialisesRelatedSearch = function (selectedObject) {\r\n        try {\r\n            if (selectedObject && selectedObject.displayTextEn) {\r\n                var query = selectedObject.displayTextEn.toLowerCase();\r\n                var category = \"top\";\r\n                this.handlesApiResponse(helper_suggester_1.Helper.sendXhr(config_suggester_1.default.urls.relatedConcept, {\r\n                    query: query,\r\n                    category: category\r\n                }), category, query, \"rc\");\r\n            }\r\n            else {\r\n                throw Error(\"Error in the selectedObject\");\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n    /**\r\n     * Handles the related Search results returned from the api .This function initiates the filtering and fill data\r\n     * into listing by calling the function filterAndFillDataIntoListing\r\n     * @param resp: TRecentSearchResponse : Related Search results returned from the related search api\r\n     * @param category: String : category of results for which suggester is visible\r\n     * @returns {void}\r\n     */\r\n    SelectBoxInput.prototype.handlesRelatedSearchResponseData = function (resp, category) {\r\n        try {\r\n            if (resp && category) {\r\n                this.dataSet = resp.resultConcepts[category];\r\n                var emptyQuery = \"\"; // to disable filtering in case of rc selected\r\n                this.filterAndFillDataIntoListing(emptyQuery);\r\n            }\r\n            else {\r\n                throw new Error(\"resp and category not found - param not found\");\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(\"Error occurred while handling RCData:\" + e);\r\n        }\r\n    };\r\n    /**\r\n     * Fills the lisitng element by filtering the result set based on the query of the input feild. The result\r\n     * list is filtered first on the basis of the query and then the data is being set into the listing element.\r\n     * @param query: {string} : Query of the input feild being entered in the suggester input\r\n     * @returns {void}\r\n     */\r\n    SelectBoxInput.prototype.filterAndFillDataIntoListing = function (query) {\r\n        try {\r\n            if (query) {\r\n                var filteredList = this.dataSet.filter(function (item) {\r\n                    if (item && item.displayTextEn) {\r\n                        item.name = item.displayTextEn;\r\n                        var lowerItem = item.displayTextEn.toLowerCase();\r\n                        var lowerQuery = query.toLowerCase();\r\n                        var includesSupported = Array.prototype.includes !== undefined;\r\n                        return includesSupported\r\n                            ? lowerItem.includes(lowerQuery)\r\n                            : lowerItem.indexOf(lowerQuery) !== -1;\r\n                    }\r\n                });\r\n                var hasResults = filteredList.length !== 0;\r\n                var result = {\r\n                    hasListUpdated: true,\r\n                    list: hasResults ? filteredList : this.dataSet,\r\n                    selection: __spread(this.resultSet.selection)\r\n                };\r\n                this.setData(result);\r\n                this.arrowCounter = -1;\r\n                this.showNoResultMessage(hasResults);\r\n            }\r\n            else {\r\n                throw new Error(\"param not found: query\");\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(\"Error occurred while entering data into Listing\");\r\n        }\r\n    };\r\n    /**\r\n     * Handles the Suggester Search results returned from the api.This function initiates the filtering and fill data\r\n     * into listing by calling the function filterAndFillDataIntoListing\r\n     * @param resp: {TSuggesterResponse} : Response of Suggester Search api\r\n     * @param category: {String} : category of results for which the suggester is visible\r\n     * @param query: {String} : Query that is put inside the input feild\r\n     * @returns{void}\r\n     */\r\n    SelectBoxInput.prototype.handlesSuggesterResponseData = function (resp, category, query) {\r\n        try {\r\n            if (resp && category && query) {\r\n                this.dataSet = resp.resultList[category];\r\n                this.filterAndFillDataIntoListing(query);\r\n            }\r\n            else {\r\n                throw new Error(\"param not found: resp , category, query\");\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(\"Error while handling Suggester respone data:\" + e);\r\n        }\r\n    };\r\n    /**\r\n     * Handles API response returned from Suggester API and inititate the intended functionality for the suggester\r\n     * as well as related searches taken both together based on the listing type.\r\n     * @param promise :{TResponse} : promise returned from the suggester api hit function\r\n     * @param category :{String} : category of results for which the suggester is visible\r\n     * @param query : {String} : Query of the input feild\r\n     * @param listingType :{String} : Listing  type that can be recent search and suggester suggestions\r\n     * @returns {void}\r\n     */\r\n    SelectBoxInput.prototype.handlesApiResponse = function (promise, category, query, listingType) {\r\n        var _this = this;\r\n        try {\r\n            if (promise) {\r\n                promise.then(function (resp) {\r\n                    if (resp) {\r\n                        if (listingType) {\r\n                            switch (listingType) {\r\n                                case \"rc\":\r\n                                    _this.handlesRelatedSearchResponseData(resp, category);\r\n                                    break;\r\n                                case \"sug\":\r\n                                    _this.handlesSuggesterResponseData(resp, category, query);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        else {\r\n                            throw new Error(\"listingType not passed as a param\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new Error(\"Promise resulted in Error - sendXHR-helper.ts\");\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                throw new Error(\"Promise expected as parameter - Not Found\");\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(\"Error occured in handle Response\" + e);\r\n        }\r\n    };\r\n    /**\r\n     * Hides the no result message present on the listing element\r\n     * when no results are there in the listing element\r\n     * @param {hasResults} : {boolean} : Boolean flag that checks whether results are there or not\r\n     * @returns: {void}\r\n     */\r\n    SelectBoxInput.prototype.hidesNoResultMessage = function (hasResults) {\r\n        this.noResultElement.style.display = hasResults ? \"block\" : \"none\";\r\n    };\r\n    /**\r\n     * Shows the no result message present on the listing element\r\n     * when there are results in the listing element\r\n     * @param {hasResults} : {boolean}\r\n     * @returns: {void}\r\n     */\r\n    SelectBoxInput.prototype.showNoResultMessage = function (hasResults) {\r\n        this.noResultElement.style.display = hasResults ? \"none\" : \"block\";\r\n    };\r\n    /***\r\n     *\r\n     */\r\n    SelectBoxInput.prototype.handleArrow = function (direction) {\r\n        /** get list of all li items */\r\n        var listItems = this.lisitingElement.querySelectorAll(\"li\");\r\n        /** determine the direction */\r\n        var isGoingUp = direction === \"up\";\r\n        var isGoingDown = direction === \"down\";\r\n        if (isGoingDown === true) {\r\n            /** counter is by default at -1 for first selection i.e. index 0 */\r\n            var currentElement = listItems[this.arrowCounter + 1];\r\n            if (currentElement) {\r\n                // add active class to\r\n                currentElement.classList.add(\"active\");\r\n                var prevElement = currentElement.previousElementSibling;\r\n                if (prevElement) {\r\n                    prevElement.classList.remove(\"active\");\r\n                }\r\n            }\r\n            if (this.arrowCounter < listItems.length - 1) {\r\n                this.arrowCounter++;\r\n            }\r\n        }\r\n        if (isGoingUp === true) {\r\n            var currentElement = listItems[this.arrowCounter];\r\n            if (currentElement) {\r\n                currentElement.classList.remove(\"active\");\r\n                var prevElement = currentElement.previousElementSibling;\r\n                if (prevElement) {\r\n                    prevElement.classList.add(\"active\");\r\n                }\r\n            }\r\n            if (this.arrowCounter > -1) {\r\n                this.arrowCounter--;\r\n            }\r\n        }\r\n        console.log(this.arrowCounter);\r\n    };\r\n    SelectBoxInput.prototype.setData = function (newData) {\r\n        // This logic executes when SelectBox is provided with the data first time\r\n        var isDataForFirstTime = newData.construct;\r\n        if (isDataForFirstTime) {\r\n            this.dataSet = newData.list;\r\n            newData.hasListUpdated = true;\r\n        }\r\n        this.resultSet = {\r\n            list: newData.list || [],\r\n            selection: newData.selection || [],\r\n            hasListUpdated: newData.hasListUpdated\r\n        };\r\n        this.notifyObservers();\r\n    };\r\n    SelectBoxInput.prototype.registerObserver = function (o) {\r\n        this.listObserverCollection.push(o);\r\n    };\r\n    SelectBoxInput.prototype.unregisterObserver = function (o) {\r\n        var index = this.listObserverCollection.indexOf(o);\r\n        this.listObserverCollection.splice(index, 1);\r\n    };\r\n    SelectBoxInput.prototype.notifyObservers = function () {\r\n        var e_1, _a;\r\n        try {\r\n            for (var _b = __values(this.listObserverCollection), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var observer = _c.value;\r\n                observer.update(this.resultSet);\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    };\r\n    SelectBoxInput.prototype.deleteSelection = function (name) {\r\n        var result = {\r\n            hasListUpdated: false,\r\n            list: __spread(this.resultSet.list),\r\n            selection: __spread(this.resultSet.selection.filter(function (item) { return item.name !== name; }))\r\n        };\r\n        this.setInputElement(name);\r\n        this.setData(result);\r\n    };\r\n    SelectBoxInput.prototype.setInputElement = function (name) {\r\n        try {\r\n            this.inputElement.value = name;\r\n        }\r\n        catch (e) {\r\n            throw new Error(\"Error occurred while prefilling data\");\r\n        }\r\n    };\r\n    return SelectBoxInput;\r\n}());\r\nexports.default = SelectBoxInput;\r\n\n\n//# sourceURL=webpack:///./src/Suggester/suggester.subject.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar data_1 = __importDefault(__webpack_require__(/*! ./Droope/data */ \"./src/Droope/data.ts\"));\r\nvar Droope_1 = __importDefault(__webpack_require__(/*! ./Droope */ \"./src/Droope/index.ts\"));\r\nvar Suggester_1 = __importDefault(__webpack_require__(/*! ./Suggester */ \"./src/Suggester/index.ts\"));\r\n(function () {\r\n    var inputElement = document.querySelector(\".select-box-input\");\r\n    var lisitingElement = document.querySelector(\".select-box-listing\");\r\n    var displayElement = document.querySelector(\".select-box-display\");\r\n    if (inputElement && lisitingElement && displayElement) {\r\n        var options = {\r\n            inputElement: inputElement,\r\n            lisitingElement: lisitingElement,\r\n            displayElement: displayElement,\r\n            selectLimit: 3,\r\n            displayListOnFocus: true,\r\n            displayDecorationList: [\"chips\"],\r\n            noResultErrorMessage: \"Sorry no result\",\r\n            selectedDecorator: \"chips\"\r\n        };\r\n        var DroopeInstance = Droope_1.default(options, data_1.default);\r\n        console.log(DroopeInstance);\r\n    }\r\n})();\r\n(function () {\r\n    var inputElement = document.querySelector(\".suggester-select-box-input\");\r\n    var lisitingElement = document.querySelector(\".suggester-select-box-listing\");\r\n    var displayElement = document.querySelector(\".suggester-select-box-display\");\r\n    if (inputElement && lisitingElement && displayElement) {\r\n        var options = {\r\n            inputElement: inputElement,\r\n            lisitingElement: lisitingElement,\r\n            displayElement: displayElement,\r\n            selectLimit: 4,\r\n            displayListOnFocus: true,\r\n            displayDecorationList: [\"chips\"],\r\n            noResultErrorMessage: \"Sorry no result\",\r\n            selectedDecorator: \"chips\"\r\n        };\r\n        var SuggesterInstance = Suggester_1.default(options, data_1.default);\r\n        console.log(SuggesterInstance);\r\n    }\r\n})();\r\n\n\n//# sourceURL=webpack:///./src/main.ts?");

/***/ })

/******/ });